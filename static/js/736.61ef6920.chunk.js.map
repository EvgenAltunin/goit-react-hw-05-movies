{"version":3,"file":"static/js/736.61ef6920.chunk.js","mappings":"kUAEaA,EAAOC,EAAAA,GAAAA,GAAH,gIAMJC,EAAOD,EAAAA,GAAAA,GAAH,yFAKJE,EAAcF,EAAAA,GAAAA,IAAH,mEAKXG,EAAOH,EAAAA,GAAAA,EAAH,6CAIJI,EAAYJ,EAAAA,GAAAA,EAAH,sB,SCwDtB,EA9Da,WACX,IAAQK,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA4BE,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,oGAEtBF,GAAa,GAFS,SAGHG,EAAAA,GAAiBT,GAHd,OAGhBU,EAHgB,OAItBN,EAAUM,EAAKC,MAJO,gDAMtBC,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAA,UAAe,KAAMC,QAArB,gBAA4C,CAC1CC,mBAAAA,EAAAA,IARoB,yBAWtBV,GAAa,GAXS,4EAAH,qDAcvBE,GACD,GAAE,CAACR,IAECG,GAKH,gCACGA,EAAOc,OAAS,GACf,SAACvB,EAAD,UACGS,EAAOe,KAAI,YAA4C,IAAzCC,EAAwC,EAAxCA,GAAIC,EAAoC,EAApCA,aAAcC,EAAsB,EAAtBA,KAAMC,EAAgB,EAAhBA,UACrC,OACE,UAAC1B,EAAD,YACE,gBACE2B,IACEH,EACI,kCAAoCA,EACpCI,EAENC,IAAI,MAEN,UAAC5B,EAAD,YACE,SAACC,EAAD,UAAOuB,KACP,UAACtB,EAAD,0BACa,kBACVuB,UAbIH,EAkBd,OAGH,+EAGDd,IAAa,SAACqB,EAAA,EAAD,OAjCT,IAoCV,C","sources":["components/Cast/Cast.styled.jsx","components/Cast/Cast.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));\n  margin-top: 20px;\n`;\n\nexport const Item = styled.li`\n  display: flex;\n  margin-bottom: 20px;\n  margin-right: 10px;\n`;\nexport const TextWrapper = styled.div`\n  margin-left: 10px;\n  margin-top: 20px;\n`;\n\nexport const Name = styled.p`\n  font-weight: 700;\n`;\n\nexport const Character = styled.p``;\n","import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from 'components/FetchApi';\nimport { useState } from 'react';\nimport actorImgNotFound from '../../images/actorImgNotFound.png';\nimport { toast } from 'react-toastify';\nimport { notificationParams } from '../../settings/settings';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  List,\n  Name,\n  Character,\n  Item,\n  TextWrapper,\n} from 'components/Cast/Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [actors, setActors] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        setIsLoading(true);\n        const data = await API.getMovieCast(movieId);\n        setActors(data.cast);\n      } catch (error) {\n        console.log(error);\n        toast.error(`${error.message}. Try again.`, {\n          notificationParams,\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieDetails();\n  }, [movieId]);\n\n  if (!actors) {\n    return null;\n  }\n\n  return (\n    <>\n      {actors.length > 0 ? (\n        <List>\n          {actors.map(({ id, profile_path, name, character }) => {\n            return (\n              <Item key={id}>\n                <img\n                  src={\n                    profile_path\n                      ? 'https://image.tmdb.org/t/p/w154' + profile_path\n                      : actorImgNotFound\n                  }\n                  alt=\"\"\n                />\n                <TextWrapper>\n                  <Name>{name}</Name>\n                  <Character>\n                    Character: <br />\n                    {character}\n                  </Character>\n                </TextWrapper>\n              </Item>\n            );\n          })}\n        </List>\n      ) : (\n        <p>We don't have information about cast of this movie.</p>\n      )}\n\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["List","styled","Item","TextWrapper","Name","Character","movieId","useParams","useState","actors","setActors","isLoading","setIsLoading","useEffect","fetchMovieDetails","API","data","cast","console","log","toast","message","notificationParams","length","map","id","profile_path","name","character","src","actorImgNotFound","alt","Loader"],"sourceRoot":""}