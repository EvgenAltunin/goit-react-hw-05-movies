{"version":3,"file":"static/js/278.df60e842.chunk.js","mappings":"8PAWMA,GAAYC,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IACjBC,GAAYD,EAAAA,EAAAA,OAAK,kBAAM,6BAAN,IAgDvB,UA9Ce,WAAO,IAAD,EACnB,GAA0CE,EAAAA,EAAAA,UAAS,MAAnD,eAAOC,EAAP,KAAsBC,EAAtB,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACA,GAAkCL,EAAAA,EAAAA,WAAS,GAA3C,eAAOM,EAAP,KAAkBC,EAAlB,KACMC,EAAW,UAAGJ,EAAaK,IAAI,gBAApB,QAAgC,GAiCjD,OA3BAC,EAAAA,EAAAA,YAAU,WACR,GAAoB,KAAhBF,EAAJ,CAIA,IAAMG,EAAgB,mCAAG,oGAErBJ,GAAa,GAFQ,SAGFK,EAAAA,GAAmBJ,GAHjB,UAGfK,EAHe,OAIrBX,EAAiBW,EAAKC,SAEK,IAAvBD,EAAKE,cANY,uBAOnBC,EAAAA,GAAAA,MAAY,8BAA+B,CAAEC,mBAAAA,EAAAA,IAP1B,4EAWrBC,QAAQC,IAAR,MACAH,EAAAA,GAAAA,MAAA,UAAe,KAAMI,QAArB,gBAA4C,CAC1CH,mBAAAA,EAAAA,IAbmB,yBAgBrBV,GAAa,GAhBQ,6EAAH,qDAmBtBI,GArBC,CAsBF,GAAE,CAACH,KAGF,6BACE,SAACT,EAAD,CAAWsB,aAjCiB,SAAAC,GAC9BjB,EAAgB,CAAEkB,MAAOD,GAC1B,KAgCG,SAACzB,EAAD,CAAW2B,OAAQvB,IAClBK,IAAa,SAAC,IAAD,MAGnB,C","sources":["pages/Movies/Movies.jsx"],"sourcesContent":["import { lazy } from 'react';\n// import { MovieList } from 'components/MovieList/MovieList';\n// import { Searchbar } from 'components/Searchbar/Searchbar';\nimport { useEffect } from 'react';\nimport { useState } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport * as API from 'components/FetchApi';\nimport { toast } from 'react-toastify';\nimport { notificationParams } from '../../settings/settings';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieList = lazy(() => import('components/MovieList/MovieList'));\nconst Searchbar = lazy(() => import('components/Searchbar/Searchbar'));\n\nconst Movies = () => {\n  const [recivedMovies, setRecivedMovies] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const [isLoading, setIsLoading] = useState(false);\n  const searchQuery = searchParams.get('query') ?? '';\n\n  const handleSearchQueryChange = value => {\n    setSearchParams({ query: value });\n  };\n\n  useEffect(() => {\n    if (searchQuery === '') {\n      return;\n    }\n\n    const fetchMovieByName = async () => {\n      try {\n        setIsLoading(true);\n        const data = await API.getMovieByName(searchQuery);\n        setRecivedMovies(data.results);\n\n        if (data.total_results === 0) {\n          toast.error('No movies found. Try again.', { notificationParams });\n          return;\n        }\n      } catch (error) {\n        console.log(error);\n        toast.error(`${error.message}. Try again.`, {\n          notificationParams,\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieByName();\n  }, [searchQuery]);\n\n  return (\n    <main>\n      <Searchbar onFormSubmit={handleSearchQueryChange} />\n      <MovieList movies={recivedMovies} />\n      {isLoading && <Loader />}\n    </main>\n  );\n};\n\nexport default Movies;\n"],"names":["MovieList","lazy","Searchbar","useState","recivedMovies","setRecivedMovies","useSearchParams","searchParams","setSearchParams","isLoading","setIsLoading","searchQuery","get","useEffect","fetchMovieByName","API","data","results","total_results","toast","notificationParams","console","log","message","onFormSubmit","value","query","movies"],"sourceRoot":""}