{"version":3,"file":"static/js/257.d3d5f9d2.chunk.js","mappings":"8RAGaA,EAAYC,EAAAA,GAAAA,KAAH,sDAITC,EAAaD,EAAAA,GAAAA,IAAH,0GAOVE,EAAQF,EAAAA,GAAAA,IAAH,2DAILG,EAAYH,EAAAA,GAAAA,GAAH,qEAITI,EAAQJ,EAAAA,GAAAA,GAAH,mEAKLK,EAASL,EAAAA,GAAAA,GAAH,mDAMNM,GAAaN,EAAAA,EAAAA,IAAOO,EAAAA,GAAPP,CAAH,0M,oEC4EvB,EA1FqB,WAAO,IAAD,IACzB,GAA0BQ,EAAAA,EAAAA,UAAS,MAAnC,eAAOC,EAAP,KAAcC,EAAd,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACQC,GAAYC,EAAAA,EAAAA,MAAZD,QACFE,GAAWC,EAAAA,EAAAA,MAoBjB,IAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAmB,mCAAG,oGAExBN,GAAa,GAFW,SAGLO,EAAAA,GAAoBN,GAHf,OAGlBO,EAHkB,OAIxBV,EAASU,GAJe,gDAMxBC,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAA,UAAe,KAAMC,QAArB,gBAA4C,CAC1CC,mBAAAA,EAAAA,IARsB,yBAWxBb,GAAa,GAXW,4EAAH,qDAczBM,GACD,GAAE,CAACL,KAECJ,EACH,OAAO,KAGT,IACEiB,EAMEjB,EANFiB,OACAC,EAKElB,EALFkB,aACAC,EAIEnB,EAJFmB,eACAC,EAGEpB,EAHFoB,SACAC,EAEErB,EAFFqB,YACAC,EACEtB,EADFsB,aAGIC,GAAW,OAAON,GAClBO,EAAiBC,KAAKC,MAAqB,GAAfR,GAElC,OACE,UAAC5B,EAAD,YACE,SAACO,EAAD,CAAY8B,GAAE,oBAAErB,EAASsB,aAAX,aAAE,EAAgBC,YAAlB,QAA0B,UAAxC,6BACA,iBAAKC,MAAO,CAAEC,QAAS,QAAvB,WACE,SAACvC,EAAD,WACE,SAACC,EAAD,CACEuC,IACEX,EACI,kCAAoCA,EACpCY,EAENC,IAAKf,OAGT,4BACE,UAACzB,EAAD,WACGyB,EADH,KACqBG,EAAaa,MAAM,EAAG,GAD3C,QAGA,wCAAgBX,EAAhB,QACA,SAAC7B,EAAD,wBACA,uBAAIyB,KACJ,SAACzB,EAAD,sBACA,SAACC,EAAD,UACG2B,EAAYa,KAAI,YAAmB,IAAhBC,EAAe,EAAfA,GAAIC,EAAW,EAAXA,KACtB,OACE,yBACE,uBAAIA,KADGD,EAIZ,aAIP,SAAC1C,EAAD,sCACA,2BACE,yBACE,SAAC,KAAD,CAAMgC,GAAE,OAAR,qBAEF,yBACE,SAAC,KAAD,CAAMA,GAAE,UAAR,0BAGHzB,IAAa,SAACqC,EAAA,EAAD,KACd,SAAC,EAAAC,SAAD,CAAUC,UAAU,SAACF,EAAA,EAAD,IAApB,UACE,SAAC,KAAD,QAIP,C","sources":["pages/MovieDetails/MovieDetails.styled.jsx","pages/MovieDetails/MovieDetails.jsx"],"sourcesContent":["import { NavLink } from 'react-router-dom';\nimport styled from 'styled-components';\n\nexport const Container = styled.main`\n  padding: 0 20px 20px 20px;\n`;\n\nexport const ImgWrapper = styled.div`\n  width: 300px;\n  height: 450px;\n  margin-right: 10px;\n  margin-bottom: 20px;\n`;\n\nexport const Image = styled.img`\n  width: 300px;\n  height: 450px;\n`;\nexport const MainTitle = styled.h3`\n  font-weight: 900;\n  margin-bottom: 10px;\n`;\nexport const Title = styled.h4`\n  margin-top: 6px;\n  margin-bottom: 6px;\n`;\n\nexport const Genres = styled.ul`\ndisplay: flex;\ngap: 6px;\n`;\n\n\nexport const LinkStyled = styled(NavLink)`\n  display: block;\n  color: black;\n  text-decoration: none;\n  padding-top: 6px;\n  padding-bottom: 6px;\n\n  cursor: pointer;\n  :hover,\n  :focus {\n    color: #858585;\n  }\n`;\n","import { useEffect, Suspense } from 'react';\nimport {\n  LinkStyled,\n  Container,\n  ImgWrapper,\n  Image,\n  MainTitle,\n  Title,\n  Genres,\n\n} from 'pages/MovieDetails/MovieDetails.styled';\nimport { Link, Outlet, useLocation, useParams } from 'react-router-dom';\nimport * as API from 'components/FetchApi';\nimport { useState } from 'react';\nimport imgNotFound from '../../images/imgNotFound.png';\nimport { toast } from 'react-toastify';\nimport { notificationParams } from '../../settings/settings';\nimport { Loader } from 'components/Loader/Loader';\n\nconst MovieDetails = () => {\n  const [movie, setMovie] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const { movieId } = useParams();\n  const location = useLocation();\n\n  useEffect(() => {\n    const fetchTrendingMovies = async () => {\n      try {\n        setIsLoading(true);\n        const data = await API.getMovieDetails(movieId);\n        setMovie(data);\n      } catch (error) {\n        console.log(error);\n        toast.error(`${error.message}. Try again.`, {\n          notificationParams,\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchTrendingMovies();\n  }, [movieId]);\n\n  if (!movie) {\n    return null;\n  }\n\n  const {\n    genres,\n    vote_average,\n    original_title,\n    overview,\n    poster_path,\n    release_date,\n  } = movie;\n\n  const movieGenres = [...genres];\n  const movieUserScore = Math.round(vote_average * 10);\n\n  return (\n    <Container>\n      <LinkStyled to={location.state?.from ?? '/movies'}>‚Üê Go back</LinkStyled>\n      <div style={{ display: 'flex' }}>\n        <ImgWrapper>\n          <Image\n            src={\n              poster_path\n                ? 'https://image.tmdb.org/t/p/w300' + poster_path\n                : imgNotFound\n            }\n            alt={original_title}\n          />\n        </ImgWrapper>\n        <div>\n          <MainTitle>\n            {original_title} ({release_date.slice(0, 4)})\n          </MainTitle>\n          <p>User Score: {movieUserScore}%</p>\n          <Title>Overview</Title>\n          <p>{overview}</p>\n          <Title>Genres</Title>\n          <Genres>\n            {movieGenres.map(({ id, name }) => {\n              return (\n                <li key={id}>\n                  <p>{name}</p>\n                </li>\n              );\n            })}\n          </Genres>\n        </div>\n      </div>\n      <Title>Additional information</Title>\n      <ul>\n        <li>\n          <Link to={`cast`}>Cast</Link>\n        </li>\n        <li>\n          <Link to={`reviews`}>Reviews</Link>\n        </li>\n      </ul>\n      {isLoading && <Loader />}\n      <Suspense fallback={<Loader />}>\n        <Outlet />\n      </Suspense>\n    </Container>\n  );\n};\n\nexport default MovieDetails;\n"],"names":["Container","styled","ImgWrapper","Image","MainTitle","Title","Genres","LinkStyled","NavLink","useState","movie","setMovie","isLoading","setIsLoading","movieId","useParams","location","useLocation","useEffect","fetchTrendingMovies","API","data","console","log","toast","message","notificationParams","genres","vote_average","original_title","overview","poster_path","release_date","movieGenres","movieUserScore","Math","round","to","state","from","style","display","src","imgNotFound","alt","slice","map","id","name","Loader","Suspense","fallback"],"sourceRoot":""}