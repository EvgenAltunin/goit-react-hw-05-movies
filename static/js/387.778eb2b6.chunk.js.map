{"version":3,"file":"static/js/387.778eb2b6.chunk.js","mappings":"sTAEaA,EAAOC,EAAAA,GAAAA,GAAH,sFAMJC,EAAOD,EAAAA,GAAAA,GAAH,uEAIJE,EAASF,EAAAA,GAAAA,EAAH,6CAGNG,EAAaH,EAAAA,GAAAA,KAAH,4E,SCkDvB,EAnDgB,WACd,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,UAAS,MAAvC,eAAOC,EAAP,KAAgBC,EAAhB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KAoBA,OAlBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,mCAAG,oGAEtBF,GAAa,GAFS,SAGHG,EAAAA,GAAoBT,GAHjB,OAGhBU,EAHgB,OAItBN,EAAWM,EAAKC,SAJM,gDAMtBC,QAAQC,IAAR,MACAC,EAAAA,GAAAA,MAAA,UAAe,KAAMC,QAArB,gBAA4C,CAC1CC,mBAAAA,EAAAA,IARoB,yBAWtBV,GAAa,GAXS,4EAAH,qDAcvBE,GACD,GAAE,CAACR,IAECG,GAKH,gCACGA,EAAQc,OAAS,GAChB,SAACtB,EAAD,UACGQ,EAAQe,KAAI,YAA8B,IAA3BC,EAA0B,EAA1BA,GAAIC,EAAsB,EAAtBA,QAASC,EAAa,EAAbA,OAC3B,OACE,UAACxB,EAAD,YACE,UAACC,EAAD,uBACU,SAACC,EAAD,UAAasB,QAEvB,uBAAID,MAJKD,EAOd,OAGH,qEAGDd,IAAa,SAACiB,EAAA,EAAD,OAtBT,IAyBV,C","sources":["components/Reviews/Reviews.styled.jsx","components/Reviews/Reviews.jsx"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  list-style: disc;\n  margin-top: 20px;\n  padding: 0 20px;\n`;\n\nexport const Item = styled.li`\n  margin-bottom: 20px;\n  margin-right: 10px;\n`;\nexport const Author = styled.p`\n  font-weight: 900;\n`;\nexport const AuthorName = styled.span`\n  font-weight: 500;\n  text-decoration: underline;\n`;\n","import { useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport * as API from 'components/FetchApi';\nimport { useState } from 'react';\nimport { toast } from 'react-toastify';\nimport { notificationParams } from '../../settings/settings';\nimport { Loader } from 'components/Loader/Loader';\nimport {\n  List,\n  Item,\n  Author,\n  AuthorName,\n} from 'components/Reviews/Reviews.styled';\n\nconst Reviews = () => {\n  const { movieId } = useParams();\n  const [coments, setcoments] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    const fetchMovieDetails = async () => {\n      try {\n        setIsLoading(true);\n        const data = await API.getMovieReviews(movieId);\n        setcoments(data.results);\n      } catch (error) {\n        console.log(error);\n        toast.error(`${error.message}. Try again.`, {\n          notificationParams,\n        });\n      } finally {\n        setIsLoading(false);\n      }\n    };\n    fetchMovieDetails();\n  }, [movieId]);\n\n  if (!coments) {\n    return null;\n  }\n\n  return (\n    <>\n      {coments.length > 0 ? (\n        <List>\n          {coments.map(({ id, content, author }) => {\n            return (\n              <Item key={id}>\n                <Author>\n                  Author: <AuthorName>{author}</AuthorName>\n                </Author>\n                <p>{content}</p>\n              </Item>\n            );\n          })}\n        </List>\n      ) : (\n        <p>We don't have any reviews for this movie.</p>\n      )}\n\n      {isLoading && <Loader />}\n    </>\n  );\n};\n\nexport default Reviews;\n"],"names":["List","styled","Item","Author","AuthorName","movieId","useParams","useState","coments","setcoments","isLoading","setIsLoading","useEffect","fetchMovieDetails","API","data","results","console","log","toast","message","notificationParams","length","map","id","content","author","Loader"],"sourceRoot":""}